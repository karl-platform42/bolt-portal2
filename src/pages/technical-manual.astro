---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { marked } from 'marked';

const technicalDocs = await getCollection('technical');
const sections = technicalDocs.sort((a, b) => 
  (a.data.order || 99) - (b.data.order || 99)
);

// Helper function to create slug from heading text
function slugify(text) {
  return text.toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/(^-|-$)/g, '');
}

// Generate TOC with nested headings
function extractHeadings(content) {
  const headingRegex = /^(#{1,6})\s+(.+)$/gm;
  const headings = [];
  let match;

  while ((match = headingRegex.exec(content)) !== null) {
    // Skip the first h1 as it's usually the same as the section title
    if (match[1].length === 1 && headings.length === 0) {
      continue;
    }
    const title = match[2];
    headings.push({
      level: match[1].length,
      title: title,
      href: `#${slugify(title)}`
    });
  }

  return headings;
}

// Process markdown content and add IDs to headings
function processMarkdown(content) {
  const renderer = new marked.Renderer();
  
  renderer.heading = (text, level) => {
    const slug = slugify(text);
    return `<h${level} id="${slug}">${text}</h${level}>`;
  };

  marked.setOptions({ renderer });
  return marked(content);
}

const allHeadings = sections.map(section => ({
  title: section.data.title,
  href: `#${slugify(section.data.title)}`,
  headings: extractHeadings(section.body)
}));

// Process each section's markdown
const processedSections = sections.map(section => ({
  ...section,
  processedContent: processMarkdown(section.body)
}));
---

<Layout title="Technical Manual">
  <div class="manual-layout">
    <aside class="toc">
      <nav>
        <h3>Contents</h3>
        <div class="toc-content">
          {allHeadings.map(section => (
            <div class="toc-section">
              <button class="toc-toggle" aria-expanded="false">
                <svg class="chevron" width="16" height="16" viewBox="0 0 16 16">
                  <path d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
                </svg>
                <a href={section.href} class="toc-link level-1">{section.title}</a>
              </button>
              <div class="toc-submenu">
                {section.headings.map(heading => (
                  <a 
                    href={heading.href} 
                    class={`toc-link level-${heading.level}`}
                    style={`margin-left: ${(heading.level - 1) * 1}rem`}
                  >
                    {heading.title}
                  </a>
                ))}
              </div>
            </div>
          ))}
        </div>
      </nav>
    </aside>
    
    <main class="content">
      <h1>Technical Manual</h1>
      
      {processedSections.map(section => (
        <div class="manual-section" id={slugify(section.data.title)}>
          <div class="section-content" set:html={section.processedContent} />
        </div>
      ))}
    </main>
  </div>
</Layout>

<style>
  .manual-layout {
    display: grid;
    grid-template-columns: 250px 1fr;
    gap: var(--space-lg);
    max-width: var(--container-width);
    margin: 0 auto;
  }

  .toc {
    position: sticky;
    top: var(--space-lg);
    height: calc(100vh - var(--space-lg) * 2);
    padding-right: var(--space-md);
    overflow-y: auto;
  }

  .toc h3 {
    margin-bottom: var(--space-md);
    font-size: 1.2rem;
    color: var(--color-heading);
  }

  .toc-content {
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
  }

  .toc-section {
    display: flex;
    flex-direction: column;
  }

  .toc-toggle {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    width: 100%;
    text-align: left;
  }

  .toc-toggle .chevron {
    transition: transform 0.2s ease;
    fill: currentColor;
  }

  .toc-toggle[aria-expanded="true"] .chevron {
    transform: rotate(90deg);
  }

  .toc-submenu {
    display: none;
    flex-direction: column;
    gap: 0.25rem;
    padding-left: 1.5rem;
    margin-top: 0.25rem;
  }

  .toc-toggle[aria-expanded="true"] + .toc-submenu {
    display: flex;
  }

  .toc-link {
    color: var(--color-text);
    text-decoration: none;
    font-size: 0.9rem;
    line-height: 1.4;
    padding: 0.2rem 0;
  }

  .toc-link:hover {
    color: var(--color-primary);
  }

  .level-1 {
    font-weight: 600;
  }

  .content {
    padding: var(--space-lg) 0;
    max-width: 65ch;
  }

  h1 {
    margin-bottom: var(--space-xl);
    font-size: 2.5rem;
    color: var(--color-heading);
  }

  .manual-section {
    margin-bottom: var(--space-xl);
    scroll-margin-top: var(--space-xl);
  }

  .section-content :global(h1) {
    font-size: 2rem;
    margin-bottom: var(--space-lg);
    scroll-margin-top: var(--space-xl);
  }

  .section-content :global(h2) {
    font-size: 1.5rem;
    margin-top: var(--space-xl);
    margin-bottom: var(--space-md);
    color: var(--color-heading);
    scroll-margin-top: var(--space-xl);
  }

  .section-content :global(h3) {
    font-size: 1.25rem;
    margin-top: var(--space-lg);
    margin-bottom: var(--space-sm);
    color: var(--color-heading);
    scroll-margin-top: var(--space-xl);
  }

  .section-content :global(p) {
    margin-bottom: var(--space-md);
    line-height: 1.6;
  }

  .section-content :global(ul),
  .section-content :global(ol) {
    margin: var(--space-sm) 0;
    padding-left: var(--space-lg);
  }

  .section-content :global(li) {
    margin-bottom: var(--space-xs);
  }

  .section-content :global(table) {
    width: 100%;
    margin: var(--space-md) 0;
    border-collapse: collapse;
  }

  .section-content :global(th),
  .section-content :global(td) {
    padding: var(--space-sm);
    border: 1px solid var(--color-border);
    text-align: left;
  }

  .section-content :global(th) {
    background: var(--color-surface);
    font-weight: 600;
  }
</style>

<script>
  // Add click handlers for TOC toggles
  document.addEventListener('DOMContentLoaded', () => {
    const toggles = document.querySelectorAll('.toc-toggle');
    toggles.forEach(toggle => {
      toggle.addEventListener('click', (e) => {
        // Prevent the link click when clicking the button
        if (e.target.tagName !== 'A') {
          e.preventDefault();
          const expanded = toggle.getAttribute('aria-expanded') === 'true';
          toggle.setAttribute('aria-expanded', !expanded);
        }
      });
    });

    // Expand the section that matches the current hash
    const hash = window.location.hash;
    if (hash) {
      const section = document.querySelector(`[href="${hash}"]`)?.closest('.toc-section');
      if (section) {
        const toggle = section.querySelector('.toc-toggle');
        toggle?.setAttribute('aria-expanded', 'true');
      }
    }
  });
</script>